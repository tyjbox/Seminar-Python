import requests
import datetime
from config import tg_bot_token, open_weather_token
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor


bot = Bot(token=tg_bot_token)
dp = Dispatcher(bot) #–≤ aiogram —Ö–µ–Ω–¥–ª–µ—Ä–∞–º–∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∏—Å–ø–µ—Ç—á–µ—Ä


@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    await message.reply('–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ) –∏ —è –ø—Ä–∏—à–ª—é —Å–≤–æ–¥–∫—É –ø–æ–≥–æ–¥—ã!')

@dp.message_handler()
async def get_weather(message: types.Message):
    # —Å–ª–æ–≤–∞—Ä—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Ç–æ—è–Ω–∏–∏ –ø–æ–≥–æ–¥—ã c —ç–º–æ–¥–∑–∏
    code_to_smile = {
        'Clear': '–Ø—Å–Ω–æ \U00002600',
        'Clouds': '–û–±–ª–∞—á–Ω–æ \U00002601',
        'Rain':'–î–æ–∂–¥—å \U00002614',
        'Drizzle':'–î–æ–∂–¥—å \U00002614',
        'Thunderstorm':'–ì—Ä–æ–∑–∞ \U000026A1',
        'Snow':'–°–Ω–µ–≥ \U0001F328',
        'Mist':'–¢—É–º–∞–Ω \U0001F32B'
    }

    try:
        r = requests.get(
            f'https://api.openweathermap.org/data/2.5/weather?q={message.text}&appid={open_weather_token}&units=metric'# units=metric –ø–µ—Ä–µ–≤–æ–¥ –≥—Ä–∞–¥—É—Å–æ–≤ –≤ —Ü–µ–ª—å—Å–∏—è
        )
        data = r.json()

        city = data['name']# –¥–∞–Ω–Ω—ã–µ –±–µ—Ä–µ–º –∏–∑ –∫–æ–Ω—Å–æ–ª–∏ —á–µ—Ä–µ–∑  pprint(data)
        cur_weather = data['main']['temp'] # main - –±–ª–æ–∫, temp - –∫–ª—é—á

        weather_description = data['weather'][0]['main']
        if  weather_description in code_to_smile:
            wd = code_to_smile[ weather_description]
        else:
            wd = '–ü–æ—Å–º–æ—Ç—Ä–∏ –≤ –æ–∫–Ω–æ, –Ω–µ –ø–æ–π–º—É —á—Ç–æ —Ç–∞–º –∑–∞ –ø–æ–≥–æ–¥–∞!'

        humidity = data['main']['humidity']
        pressure = data['main']['pressure']
        wind = data['wind']['speed']
        sunrise_timestamp = datetime.datetime.fromtimestamp(data['sys']['sunrise'])# –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —á–µ—Ä–µ–∑ –º–æ–¥—É–ª—å datetime
        sunset_timestamp = datetime.datetime.fromtimestamp(data['sys']['sunset'])
        lenght_of_the_day = datetime.datetime.fromtimestamp(data['sys']['sunset']) - datetime.datetime.fromtimestamp(data['sys']['sunrise'])

        await message.reply(f'***{datetime.datetime.today().strftime("%Y-%m-%d %H:%M")}***\n' # –≤—ã–≤–æ–¥ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
              f'–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ: {city}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {cur_weather} –°¬∞ {wd}\n'
              f'–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity} %\n–î–∞–≤–ª–µ–Ω–∏–µ: {pressure} –º–º.—Ä—Ç.—Å—Ç\n–í–µ—Ç–µ—Ä: {wind} –º/—Å\n–í–æ—Å—Ö–æ–¥ —Å–æ–ª–Ω—Ü–∞: {sunrise_timestamp}\n'
              f'–ó–∞–∫–∞—Ç —Å–æ–ª–Ω—Ü–∞: {sunset_timestamp}\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è: {lenght_of_the_day}\n'
              f'***–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!***üòâ'
             )
    except:
        await message.replyprint('\U00002620 –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞!') 




if __name__== '__main__':
    executor.start_polling(dp)